
from flask import Flask, request, jsonify
from flask_cors import CORS
import asyncio
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError, FloodWaitError, AuthKeyDuplicatedError
import os
import json
from datetime import datetime, timezone
import threading
import time
import hashlib
import fcntl
import atexit
import traceback

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –í–∞—à–∏ API credentials
api_id = 24914656
api_hash = '126107e0e53e49d94b3d3512d0715198'

OPERATORS_FILE = 'operators.json'
lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
clients_pool = {}
clients_lock = threading.Lock()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è phone_code_hash
phone_code_hashes = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –¥–ª—è asyncio
global_loop = None
loop_thread = None

def setup_global_event_loop():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global global_loop, loop_thread
    
    def run_event_loop():
        global global_loop
        global_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(global_loop)
        print("üîÑ –ì–õ–û–ë–ê–õ–¨–ù–´–ô EVENT LOOP –ó–ê–ü–£–©–ï–ù")
        global_loop.run_forever()
    
    if global_loop is None:
        loop_thread = threading.Thread(target=run_event_loop, daemon=True)
        loop_thread.start()
        time.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        print("‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–´–ô EVENT LOOP –ù–ê–°–¢–†–û–ï–ù")

def run_async_in_global_loop(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º event loop"""
    global global_loop
    if global_loop is None:
        setup_global_event_loop()
    
    future = asyncio.run_coroutine_threadsafe(coro, global_loop)
    return future.result(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

def load_operators_safe():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    with lock:
        try:
            if os.path.exists(OPERATORS_FILE):
                with open(OPERATORS_FILE, 'r', encoding='utf-8') as f:
                    fcntl.flock(f.fileno(), fcntl.LOCK_SH)
                    try:
                        data = json.load(f)
                        return data if isinstance(data, list) else []
                    finally:
                        fcntl.flock(f.fileno(), fcntl.LOCK_UN)
            else:
                return []
        except Exception as e:
            print(f"Error loading operators: {e}")
            return []

def save_operators_safe(operators):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª —Å —Ñ–∞–π–ª–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    with lock:
        try:
            temp_file = OPERATORS_FILE + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                fcntl.flock(f.fileno(), fcntl.LOCK_EX)
                try:
                    json.dump(operators, f, ensure_ascii=False, indent=2)
                    f.flush()
                    os.fsync(f.fileno())
                finally:
                    fcntl.flock(f.fileno(), fcntl.LOCK_UN)
            
            os.rename(temp_file, OPERATORS_FILE)
            return True
        except Exception as e:
            print(f"Error saving operators: {e}")
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                except:
                    pass
            return False

def get_session_name(operator_id, phone_number):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ operator_id –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    unique_string = f"{operator_id}_{phone_number}"
    hash_object = hashlib.md5(unique_string.encode())
    return f"session_{hash_object.hexdigest()}"

async def get_or_create_client(operator_id, phone_number):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
    """
    client_key = f"{operator_id}_{phone_number}"
    
    with clients_lock:
        if client_key in clients_pool:
            client = clients_pool[client_key]
            if client.is_connected():
                print(f"‚ôªÔ∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–õ–ò–ï–ù–¢ –¥–ª—è {phone_number}")
                return client
            else:
                print(f"üîÑ –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ê–ï–ú –ö–õ–ò–ï–ù–¢–ê –¥–ª—è {phone_number}")
                try:
                    await client.connect()
                    return client
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
                    del clients_pool[client_key]
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    print(f"üÜï –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ö–õ–ò–ï–ù–¢ –¥–ª—è {phone_number}")
    
    os.makedirs("sessions", exist_ok=True)
    session_name = get_session_name(operator_id, phone_number)
    session_path = f"sessions/{session_name}"
    
    client = TelegramClient(
        session_path, 
        api_id, 
        api_hash,
        system_version="4.16.30-vxCUSTOM"
    )
    
    try:
        await client.connect()
        print(f"‚úÖ –ö–õ–ò–ï–ù–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù –¥–ª—è {phone_number}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª
        with clients_lock:
            clients_pool[client_key] = client
        
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        try:
            await client.disconnect()
        except:
            pass
        raise e

def cleanup_clients():
    """–û—á–∏—Å—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    print("üßπ –û–ß–ò–°–¢–ö–ê –ö–õ–ò–ï–ù–¢–û–í...")
    with clients_lock:
        for client_key, client in clients_pool.items():
            try:
                if hasattr(client, 'disconnect'):
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º event loop
                    if global_loop and not global_loop.is_closed():
                        future = asyncio.run_coroutine_threadsafe(client.disconnect(), global_loop)
                        future.result(timeout=5)
                    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_key} –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_key}: {e}")
        clients_pool.clear()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop
    if global_loop and not global_loop.is_closed():
        global_loop.call_soon_threadsafe(global_loop.stop)
    
    print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
atexit.register(cleanup_clients)

@app.route('/', methods=['GET'])
def health_check():
    return jsonify({'status': 'ok', 'message': 'Telegram API service is running'})

# ============= –≠–ù–î–ü–û–ò–ù–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò =============

@app.route('/api/auth/send-code', methods=['POST'])
def send_code():
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞")
        data = request.get_json()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(data, indent=2)}")
        
        phone = data.get('phone')
        operator = data.get('operator')
        
        if not phone or not operator:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return jsonify({'success': False, 'error': 'Phone and operator are required'})
        
        print(f"üìû –û–¢–ü–†–ê–í–ö–ê –ö–û–î–ê –¥–ª—è {phone}, –æ–ø–µ—Ä–∞—Ç–æ—Ä: {operator}")
        
        async def send_code_async():
            try:
                print("üîß –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞...")
                client = await get_or_create_client(operator, phone)
                
                print(f"üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–û–î —á–µ—Ä–µ–∑ Telegram API...")
                result = await client.send_code_request(phone)
                phone_code_hash = result.phone_code_hash
                
                print(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. phone_code_hash: {phone_code_hash[:20]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                phone_code_hashes[f"{operator}_{phone}"] = phone_code_hash
                
                print(f"‚úÖ –ö–û–î –û–¢–ü–†–ê–í–õ–ï–ù –¥–ª—è {phone}")
                return {
                    'success': True, 
                    'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram',
                    'phone_code_hash': phone_code_hash
                }
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–û–î–ê: {e}")
                print(f"‚ùå TRACEBACK: {traceback.format_exc()}")
                return {'success': False, 'error': str(e)}
        
        result = run_async_in_global_loop(send_code_async())
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {json.dumps(result, indent=2)}")
        return jsonify(result)
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ send_code: {str(e)}")
        print(f"üí• TRACEBACK: {traceback.format_exc()}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/auth/verify', methods=['POST'])
def verify_code():
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–¥–∞")
        data = request.get_json()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {json.dumps(data, indent=2)}")
        
        phone = data.get('phone')
        code = data.get('code')
        phone_code_hash = data.get('phone_code_hash')
        operator = data.get('operator')
        
        if not all([phone, code, phone_code_hash, operator]):
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return jsonify({'success': False, 'error': 'All fields are required'})
        
        print(f"üîê –ü–†–û–í–ï–†–ö–ê –ö–û–î–ê {code} –¥–ª—è {phone}")
        
        async def verify_code_async():
            try:
                print("üîß –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞...")
                client = await get_or_create_client(operator, phone)
                
                print(f"üöÄ –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–î —á–µ—Ä–µ–∑ Telegram API...")
                print(f"üîê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: phone={phone}, code={code}, phone_code_hash={phone_code_hash[:20] if phone_code_hash else 'None'}...")
                
                try:
                    user = await client.sign_in(phone, code, phone_code_hash=phone_code_hash)
                    print(f"‚úÖ –ö–û–î –ü–†–ò–ù–Ø–¢ –¥–ª—è {phone}")
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name if hasattr(user, 'first_name') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    session_data = client.session.save()
                    print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(session_data) if session_data else 0}")
                    
                    return {
                        'success': True,
                        'message': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                        'session_data': session_data,
                        'needs_password': False
                    }
                    
                except SessionPasswordNeededError:
                    print(f"üõ°Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø 2FA –¥–ª—è {phone}")
                    return {
                        'success': True,
                        'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                        'needs_password': True
                    }
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –ö–û–î–ê: {e}")
                print(f"‚ùå TRACEBACK: {traceback.format_exc()}")
                return {'success': False, 'error': str(e)}
        
        result = run_async_in_global_loop(verify_code_async())
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {json.dumps(result, indent=2)}")
        return jsonify(result)
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ verify_code: {str(e)}")
        print(f"üí• TRACEBACK: {traceback.format_exc()}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/auth/password', methods=['POST'])
def check_password():
    try:
        print("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è 2FA")
        data = request.get_json()
        phone = data.get('phone')
        password = data.get('password')
        operator = data.get('operator')
        
        if not all([phone, password, operator]):
            return jsonify({'success': False, 'error': 'All fields are required'})
        
        print(f"üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê 2FA –¥–ª—è {phone}")
        
        async def check_password_async():
            try:
                client = await get_or_create_client(operator, phone)
                
                print(f"üöÄ –ü–†–û–í–ï–†–Ø–ï–ú –ü–ê–†–û–õ–¨ —á–µ—Ä–µ–∑ Telegram API...")
                
                user = await client.sign_in(password=password)
                print(f"‚úÖ 2FA –ü–†–ò–ù–Ø–¢ –¥–ª—è {phone}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                session_data = client.session.save()
                
                return {
                    'success': True,
                    'message': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                    'session_data': session_data
                }
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò 2FA: {e}")
                print(f"‚ùå TRACEBACK: {traceback.format_exc()}")
                return {'success': False, 'error': str(e)}
        
        result = run_async_in_global_loop(check_password_async())
        return jsonify(result)
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ check_password: {str(e)}")
        print(f"üí• TRACEBACK: {traceback.format_exc()}")
        return jsonify({'success': False, 'error': str(e)}), 500

# ============= –û–°–¢–ê–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =============

@app.route('/api/operators', methods=['GET'])
def get_operators():
    operators = load_operators_safe()
    return jsonify({'operators': operators})

@app.route('/api/operators', methods=['POST'])
def add_operator():
    data = request.get_json()
    operator = data.get('operator')
    
    operators = load_operators_safe()
    if operator and operator not in operators:
        operators.append(operator)
        if save_operators_safe(operators):
            return jsonify({'success': True, 'operators': operators})
        else:
            return jsonify({'success': False, 'error': 'Failed to save operator'})
    return jsonify({'success': False, 'error': 'Operator already exists or invalid'})

@app.route('/api/operators/<operator>', methods=['DELETE'])
def delete_operator(operator):
    operators = load_operators_safe()
    original_count = len(operators)
    operators = [op for op in operators if op != operator]
    
    if len(operators) < original_count:
        if save_operators_safe(operators):
            return jsonify({'success': True, 'operators': operators})
        else:
            return jsonify({'success': False, 'error': 'Failed to delete operator'})
    else:
        return jsonify({'success': False, 'error': 'Operator not found'})

@app.route('/api/chats/<operator>', methods=['GET'])
def get_chats(operator):
    try:
        phone = request.args.get('phone')
        if not phone:
            return jsonify({'success': False, 'error': 'Phone number is required'})
        
        print(f"üî• –ó–ê–ì–†–£–ó–ö–ê –ß–ê–¢–û–í –¥–ª—è {operator} —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone}")
        
        async def get_chats_async():
            try:
                client = await get_or_create_client(operator, phone)
                
                print("üöÄ –ó–ê–ì–†–£–ó–ö–ê –î–ò–ê–õ–û–ì–û–í...")
                
                all_dialogs = []
                dialog_count = 0
                
                async for dialog in client.iter_dialogs():
                    dialog_count += 1
                    all_dialogs.append(dialog)
                    
                    if dialog_count % 50 == 0:
                        await asyncio.sleep(0.05)
                
                print(f"‚úÖ –ó–ê–ì–†–£–ñ–ï–ù–û {len(all_dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
                
                chats = []
                for dialog in all_dialogs:
                    try:
                        if (hasattr(dialog.entity, 'bot') and dialog.entity.bot) or \
                           dialog.entity.__class__.__name__ == 'UserEmpty':
                            continue
                        
                        last_message = ''
                        if dialog.message:
                            if hasattr(dialog.message, 'message') and dialog.message.message:
                                last_message = dialog.message.message
                            elif hasattr(dialog.message, 'media'):
                                last_message = '–ú–µ–¥–∏–∞ —Ñ–∞–π–ª'
                            else:
                                last_message = '–°–æ–æ–±—â–µ–Ω–∏–µ'
                        
                        unread_count = getattr(dialog, 'unread_count', 0)
                        
                        name = ""
                        try:
                            if hasattr(dialog.entity, 'first_name') and dialog.entity.first_name:
                                name += dialog.entity.first_name
                            if hasattr(dialog.entity, 'last_name') and dialog.entity.last_name:
                                if name:
                                    name += " "
                                name += dialog.entity.last_name
                            if not name and hasattr(dialog.entity, 'title') and dialog.entity.title:
                                name = dialog.entity.title
                            if not name:
                                name = f"–ß–∞—Ç {dialog.id}"
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è {dialog.id}: {e}")
                            name = f"–ß–∞—Ç {dialog.id}"
                        
                        chat_info = {
                            'id': str(dialog.id),
                            'name': name,
                            'lastMessage': last_message[:100] + '...' if len(last_message) > 100 else last_message,
                            'timestamp': dialog.message.date.strftime('%H:%M') if dialog.message and hasattr(dialog.message, 'date') else '',
                            'unreadCount': unread_count,
                            'type': 'group' if hasattr(dialog.entity, 'megagroup') or hasattr(dialog.entity, 'broadcast') else 'private'
                        }
                        chats.append(chat_info)
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞ {dialog.id}: {e}")
                        continue
                
                print(f"üéØ –ó–ê–ì–†–£–ñ–ï–ù–û {len(chats)} –ß–ê–¢–û–í")
                return {'success': True, 'chats': chats}
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ß–ê–¢–û–í: {e}")
                return {'success': False, 'error': str(e)}
        
        result = run_async_in_global_loop(get_chats_async())
        return jsonify(result)
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")
        return jsonify({
            'success': False, 
            'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {str(e)}'
        }), 500

@app.route('/api/messages/<operator>/<chat_id>', methods=['GET'])
def get_messages(operator, chat_id):
    try:
        chat_id = int(chat_id)
        phone = request.args.get('phone')
        if not phone:
            return jsonify({'success': False, 'error': 'Phone number is required'})
        
        print(f"üî• –ó–ê–ì–†–£–ó–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        async def get_messages_async():
            try:
                client = await get_or_create_client(operator, phone)
                
                print("üöÄ –ó–ê–ì–†–£–ó–ö–ê –°–û–û–ë–©–ï–ù–ò–ô...")
                
                messages = []
                message_count = 0
                
                async for msg in client.iter_messages(chat_id, reverse=True):
                    try:
                        message_count += 1
                        
                        if message_count % 100 == 0:
                            await asyncio.sleep(0.02)
                        
                        message_text = ''
                        message_type = 'text'
                        voice_data = None
                        
                        if msg.message:
                            message_text = msg.message
                        elif msg.media:
                            if hasattr(msg.media, 'document'):
                                doc = msg.media.document
                                if doc and hasattr(doc, 'mime_type'):
                                    if 'audio/ogg' in doc.mime_type or 'audio/mpeg' in doc.mime_type:
                                        message_type = 'voice'
                                        message_text = '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                                        duration = 0
                                        if hasattr(doc, 'attributes'):
                                            for attr in doc.attributes:
                                                if hasattr(attr, 'duration'):
                                                    duration = attr.duration
                                                    break
                                        voice_data = {
                                            'voiceDuration': f"0:{duration//60:02d}:{duration%60:02d}" if duration > 0 else "0:00",
                                            'voiceUrl': f"voice_{msg.id}.ogg"
                                        }
                                    else:
                                        message_text = '–î–æ–∫—É–º–µ–Ω—Ç'
                                else:
                                    message_text = '–§–∞–π–ª'
                            elif hasattr(msg.media, 'photo'):
                                message_text = '–§–æ—Ç–æ'
                            else:
                                message_text = '–ú–µ–¥–∏–∞'
                        else:
                            message_text = '–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                        
                        message_data = {
                            'id': str(msg.id),
                            'text': message_text,
                            'timestamp': msg.date.strftime('%H:%M') if hasattr(msg, 'date') and msg.date else '',
                            'isIncoming': not msg.out,
                            'isRead': True,
                            'type': message_type,
                            'sender': '–í—ã' if msg.out else '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'
                        }
                        
                        if voice_data:
                            message_data.update(voice_data)
                        
                        messages.append(message_data)
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
                        continue
                
                print(f"üéØ –ó–ê–ì–†–£–ñ–ï–ù–û {len(messages)} –°–û–û–ë–©–ï–ù–ò–ô")
                return {'success': True, 'messages': messages, 'chatTitle': f'–ß–∞—Ç {chat_id}'}
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –°–û–û–ë–©–ï–ù–ò–ô: {e}")
                return {'success': False, 'error': str(e)}
        
        result = run_async_in_global_loop(get_messages_async())
        return jsonify(result)
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {str(e)}")
        return jsonify({
            'success': False, 
            'error': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}'
        }), 500

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Flask
    setup_global_event_loop()
    
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting Flask app on port {port}")
    print(f"‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–£–õ –ö–õ–ò–ï–ù–¢–û–í –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù!")
    print(f"üîÑ ASYNCIO EVENT LOOP –ò–°–ü–†–ê–í–õ–ï–ù!")
    print(f"üì° –ù–ï–ü–†–ï–†–´–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–û–°–¢–£–ü–ï–ù!")
    print(f"üîê –≠–ù–î–ü–û–ò–ù–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–´!")
    print(f"üìã Available routes:")
    for rule in app.url_map.iter_rules():
        print(f"  {rule.methods} {rule.rule}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
